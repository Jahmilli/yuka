// Code generated by go-swagger; DO NOT EDIT.

package api_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HandlersCreateUserInput handlers create user input
//
// swagger:model handlers.CreateUserInput
type HandlersCreateUserInput struct {

	// auth id
	// Required: true
	AuthID *string `json:"auth_id"`

	// current organization id
	// Required: true
	CurrentOrganizationID *string `json:"current_organization_id"`

	// device token
	// Required: true
	DeviceToken *string `json:"device_token"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this handlers create user input
func (m *HandlersCreateUserInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlersCreateUserInput) validateAuthID(formats strfmt.Registry) error {

	if err := validate.Required("auth_id", "body", m.AuthID); err != nil {
		return err
	}

	return nil
}

func (m *HandlersCreateUserInput) validateCurrentOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("current_organization_id", "body", m.CurrentOrganizationID); err != nil {
		return err
	}

	return nil
}

func (m *HandlersCreateUserInput) validateDeviceToken(formats strfmt.Registry) error {

	if err := validate.Required("device_token", "body", m.DeviceToken); err != nil {
		return err
	}

	return nil
}

func (m *HandlersCreateUserInput) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this handlers create user input based on context it is used
func (m *HandlersCreateUserInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HandlersCreateUserInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HandlersCreateUserInput) UnmarshalBinary(b []byte) error {
	var res HandlersCreateUserInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
